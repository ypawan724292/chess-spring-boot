name: Build and Deploy Multi-Services to AKS

on:
  push:
    branches:
      - main
      - staging

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}       # without .azurecr.io
  IMAGE_TAG: ${{ github.sha }}
  SERVICES: "user-service results-service move-service match-making-service"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ACR login
      - name: Azure Container Registry Login
        run: az acr login --name $ACR_NAME

      # Build and Push all service images
      - name: Build and Push Images
        run: |
          for SERVICE in $SERVICES; do
            echo "Building $SERVICE ..."
            IMAGE=$ACR_NAME.azurecr.io/$SERVICE:$IMAGE_TAG
            docker build -t $IMAGE ./services/$SERVICE
            docker push $IMAGE
            echo "$SERVICE=$IMAGE" >> $GITHUB_ENV
          done

      # Select AKS cluster + namespace based on branch
      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "AKS_RESOURCE_GROUP=staging-rg" >> $GITHUB_ENV
            echo "AKS_CLUSTER_NAME=staging-aks" >> $GITHUB_ENV
            echo "NAMESPACE=staging" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "AKS_RESOURCE_GROUP=prod-rg" >> $GITHUB_ENV
            echo "AKS_CLUSTER_NAME=prod-aks" >> $GITHUB_ENV
            echo "NAMESPACE=prod" >> $GITHUB_ENV
          fi

      # Get AKS credentials
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group $AKS_RESOURCE_GROUP \
            --name $AKS_CLUSTER_NAME \
            --overwrite-existing

      # Deploy each service
      - name: Deploy to AKS
        run: |
          for SERVICE in $SERVICES; do
            IMAGE=${!SERVICE} # expand from env
            echo "Deploying $SERVICE with $IMAGE ..."
            sed "s|DOCKER_IMAGE_PLACEHOLDER|$IMAGE|g" k8s/$SERVICE-deployment.yaml | \
              kubectl apply -n $NAMESPACE -f -
          done
