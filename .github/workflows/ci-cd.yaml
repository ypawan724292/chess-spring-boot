name: CI/CD Multi-Module with Paketo to Azure (Chess)

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
      AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
      SERVICES: "user-service results-service move-service match-making-service"
      # Directory where your deployment YAML files are stored
      K8S_DEPLOYMENT_PATH: "k8s"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name $ACR_NAME

      - name: Set Environment Variables
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "TAG=prod-${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "ENV=staging" >> $GITHUB_ENV
            echo "TAG=staging-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group $RESOURCE_GROUP \
            --name $AKS_CLUSTER_NAME

      - name: Create Namespace if not exist
        run: |
          kubectl get namespace $ENV || kubectl create namespace $ENV

      - name: Docker Login to ACR
        run: echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_NAME }} --password-stdin


      - name: Build & Tag & Push Images (Paketo)
        run: |
          for SERVICE in $SERVICES; do
            LOCAL_IMAGE=$SERVICE:0.0.1-SNAPSHOT
            ACR_IMAGE=${{ secrets.ACR_NAME }}.azurecr.io/$SERVICE:$TAG
          
            # Build image with Paketo targeting ARM64
            ./gradlew :$SERVICE:bootBuildImage \
            -Dspring-boot.build-image.imageName=$LOCAL_IMAGE \
            -Dspring-boot.build-image.builder=paketobuildpacks/builder:base \
            -Dspring-boot.build-image.runImage=paketobuildpacks/run:base-cnb \
            -Dspring-boot.build-image.platform=linux/arm64
          
            # Retag and push to ACR
            docker tag $LOCAL_IMAGE $ACR_IMAGE
            docker push $ACR_IMAGE
            done

      - name: Create or Update Deployments
        run: |
          for SERVICE in $SERVICES; do
            sed "s|DOCKER_IMAGE_PLACEHOLDER|$ACR_NAME.azurecr.io/$SERVICE|g; s|TAG_PLACEHOLDER|$TAG|g" \
              $K8S_DEPLOYMENT_PATH/$SERVICE.yaml > temp-deployment.yaml
          
            # Apply the updated YAML file to the cluster
            kubectl apply -f temp-deployment.yaml -n $ENV
          
            # Clean up the temporary file
            rm temp-deployment.yaml
          done

      - name: Verify Deployment Rollout
        run: |
          for SERVICE in $SERVICES; do
            kubectl rollout status deployment/$SERVICE -n $ENV
          done
